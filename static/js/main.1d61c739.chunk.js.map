{"version":3,"sources":["GraphQL/getUserData.js","User/Card.js","User/index.js","GraphQL/getSearch.js","Search/List.js","Search/index.js","App.js","serviceWorker.js","ApolloClient/index.js","index.js"],"names":["gql","_templateObject","Card","_ref","userData","data","name","profile_image_url","screen_name","tweets_count","followers_count","description","created_at","react_default","a","createElement","src","alt","width","style","marginBottom","User","_useState","useState","_useState2","Object","slicedToArray","user","setUser","placeholder","onKeyPress","e","key","target","value","react_apollo_esm","query","getUserData","variables","identifier","identity","loading","error","User_Card","twitter","getSearch_templateObject","List","tweet","text","id","_tweet$user","margin","border","padding","display","justifyContent","alignItems","color","marginLeft","href","concat","Search","searchQuery","setSearchQuery","_useState3","_useState4","tweets","setTweetsNumber","type","onChange","getSearch","q","count","search","map","Search_List","App","className","src_User","src_Search","Component","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d61c739.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport default gql`\n  query user($identifier: UserIdentifier!, $identity: UserIdentity!) {\n    twitter {\n      user(identifier: $identifier, identity: $identity) {\n        created_at\n        description\n        id\n        screen_name\n        name\n        profile_image_url\n        url\n        tweets_count\n        followers_count\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nfunction Card({ data: userData }) {\n  const {\n    name,\n    profile_image_url,\n    screen_name,\n    tweets_count,\n    followers_count,\n    description,\n    created_at\n  } = userData;\n\n  return (\n    <div>\n      <img src={profile_image_url} alt=\"user image\" width=\"120px\" />\n      <h1\n        style={{\n          marginBottom: 0\n        }}\n      >\n        {name}\n      </h1>\n      <span>@{screen_name}</span>\n      <p>{description}</p>\n      <p>Joined: {created_at}</p>\n      <p>\n        Followers: {followers_count} | Tweets: {tweets_count}\n      </p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport getUserData from \"../GraphQL/getUserData.js\";\nimport Card from \"./Card.js\";\n\nfunction User() {\n  const [user, setUser] = useState(\"\");\n\n  return (\n    <div>\n      <div\n        style={{\n          marginBottom: 50\n        }}\n      >\n        <label>\n          Enter username{\" \"}\n          <input\n            placeholder=\"ex. zeyadetman\"\n            onKeyPress={e => {\n              if (e.key === \"Enter\") setUser(e.target.value);\n            }}\n          />\n        </label>\n      </div>\n      <Query\n        query={getUserData}\n        variables={{\n          identifier: \"name\",\n          identity: user\n        }}\n      >\n        {({ loading, data, error }) => {\n          if (loading) return <h1>Loading...</h1>;\n          if (error) return null;\n\n          return <Card data={data.twitter.user} />;\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default User;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  query search($q: String!, $count: Int, $result_type: SearchReponse) {\n    twitter {\n      search(q: $q, count: $count, result_type: $result_type) {\n        text\n        id\n        user {\n          name\n          screen_name\n          profile_image_url\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\n\nfunction List({ tweet }) {\n  const {\n    text,\n    id,\n    user: { name, screen_name, profile_image_url }\n  } = tweet;\n\n  return (\n    <div\n      style={{\n        width: \"80%\",\n        margin: \"25px auto\",\n        border: \"5px solid #afafaf\",\n        padding: 5\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\"\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            margin: \"5px\"\n          }}\n        >\n          <img src={profile_image_url} />\n        </div>\n        <div>\n          <h1\n            style={{\n              margin: 0\n            }}\n          >\n            {name}\n          </h1>\n          <span>@{screen_name}</span>\n        </div>\n      </div>\n      <p>{text}</p>\n      <a\n        style={{\n          color: \"#29a8df\",\n          marginLeft: 15\n        }}\n        href={`https://twitter.com/${screen_name}/status/${id}`}\n      >\n        show on twitter\n      </a>\n    </div>\n  );\n}\n\nexport default List;\n","import React, { useState } from \"react\";\nimport { Query } from \"react-apollo\";\nimport getSearch from \"../GraphQL/getSearch.js\";\nimport List from \"./List.js\";\n\nfunction Search() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [tweets, setTweetsNumber] = useState(10);\n\n  return (\n    <div>\n      <div\n        style={{\n          marginBottom: 50\n        }}\n      >\n        <label>\n          Tweets Number{\" \"}\n          <input\n            placeholder=\"10\"\n            value={tweets}\n            type=\"number\"\n            onChange={e => {\n              setTweetsNumber(e.target.value);\n            }}\n          />\n        </label>\n        <label>\n          Enter search{\" \"}\n          <input\n            placeholder=\"ex. ac milan\"\n            onKeyPress={e => {\n              if (e.key === \"Enter\") setSearchQuery(e.target.value);\n            }}\n          />\n        </label>\n      </div>\n      <Query\n        query={getSearch}\n        variables={{\n          q: searchQuery,\n          count: tweets\n        }}\n      >\n        {({ loading, data, error }) => {\n          if (loading) return <h1>Loading...</h1>;\n          if (error) return null;\n\n          return data.twitter.search.map(tweet => <List tweet={tweet} />);\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport User from \"./User\";\nimport Search from \"./Search\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App App-body\">\n        <header className=\"App-header\">\n          <img\n            src=\"https://www.freepnglogos.com/uploads/twitter-logo-png/twitter-logo-vector-png-clipart-1.png\"\n            alt=\"logo\"\n            width=\"125px\"\n          />\n        </header>\n        <div>\n          <User />\n          <Search />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient, { InMemoryCache, HttpLink } from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"https://www.graphqlhub.com/graphql\",\n  \n});\n\nexport default client;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport client from \"./ApolloClient\";\nimport { ApolloProvider } from \"react-apollo\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}